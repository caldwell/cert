#!/usr/bin/env ruby
# coding: utf-8
# Copyright Â© 2016-2018 David Caldwell <david@porkrind.org>
# Licensed under the GPL v3 or newer. See the LICENSE file for details.

require 'yaml'
require 'fileutils'
require 'openssl'
require 'docopt'
require 'acme-client'

$my_dir = File.dirname($0)
$conf_dir = $my_dir

require 'verbose-shell'
Vsh = VerboseShell

doc = <<-DOCOPT
    Usage:
        cert [-v...] [options]

    Options:
            -v, --verbose                 Turn up the verbosity
            -n, --dry-run                 Don't really do anything
            -c, --config=<confdir>        Use this config dir (default: #{$conf_dir})
            --staging                     Use the letsencrypt staging CA
    DOCOPT

args = begin
         Docopt::docopt(doc)
       rescue Docopt::Exit => e
         puts e.message
         exit 1
       end

$verbose = args['--verbose']
$dryrun = args['--dry-run']
$conf_dir = args['--config'] if args['--config']
$staging = args['--staging']

$certs_dir = "#{$conf_dir}/certs"

Vsh.verbose = ($verbose||0) > 1

def load_config(file)
  config = YAML.load_file(file)

  (config["include"]||[]).map { |file| load_config(file) }.reduce(config) { |config, c| config.merge(c) }
end

def file(info, type, format="pem")
  "#{$certs_dir}/#{info['year']}/#{info['name']}-#{info['date']}.#{type}.#{format}"
end

def file_master(info, type, format="pem")
  "#{$certs_dir}/#{info['name']}.#{type}.#{format}"
end

def parse_time_from_filename(name)
  raise "no date found in #{name}" unless m = name.match(/(20\d\d)-([01]\d)-([0123]\d)/)
  Time.new(m[1],m[2],m[3])
end

def generate_csr(info)
  puts "generating key + csr: #{file(info,"key")}, #{file(info,"csr")}" if ($verbose||0) == 1
  return if $dryrun
  key = OpenSSL::PKey::RSA.new info["RSA_BITS"] || $config["RSA_BITS"] || 4096
  csr = Acme::Client::CertificateRequest.new(private_key: key,
                                             names: info['alt'] ? info['alt'].map {|a| a['DNS'] }.select {|a| a} : [],
                                             subject: Hash[
                                               [%w'cn           CN',
                                                %w'country      C',
                                                %w'organization O',
                                                %w'section      OU',
                                                %w'state        ST',
                                                %w'locality     L',
                                                %w'email        emailAddress',
                                               ]
                                               .map {|us,them| !info[us] ? nil : [them, info[us]] }
                                               .select {|x| x}]
                                            )
  Vsh.mkdir_p File.dirname(file(info,"key"))
  IO.write(file(info,"csr"), csr.to_pem, perm: 0644)
  IO.write(file(info,"key"), key.to_pem, perm: 0600)
  Vsh.chown info['user'], info['group'], file(info,"key")
end

def with_well_known_files(challenge, well_known_dir, well_known_host)
  paths = challenge.map do |ch|
    well_known_path = "#{well_known_dir}/#{ch.token}"
    if well_known_host
      puts "Writing challenge to #{well_known_host}:#{well_known_path}" if ($verbose||0) >= 2
      IO.popen(["ssh", well_known_host, "cat", '>', well_known_path], "w") {|io| io.write ch.file_content}
    else
      IO.write(well_known_path, ch.file_content)
    end
    well_known_path
  end
  begin
    yield
  ensure
    paths.each do |path|
      if well_known_host
        Vsh.system *%W"ssh #{well_known_host} rm #{path}"
      else
        File.delete(path)
      end
    end
  end
end

def acme_client()
  if !$client
    endpoint = $staging ? 'https://acme-staging-v02.api.letsencrypt.org/directory' : 'https://acme-v02.api.letsencrypt.org/directory'
    acct_key_file = "#{$conf_dir}/letsencrypt-account.key"
    IO.write(acct_key_file, OpenSSL::PKey::RSA.new(info["RSA_BITS"] || $config["RSA_BITS"] || 4096).to_pem) unless File.exist? acct_key_file
    account_key = OpenSSL::PKey::RSA.new IO.read acct_key_file

    $client = Acme::Client.new(private_key: account_key, directory: endpoint, connection_options: { request: { open_timeout: 35, timeout: 35 } })
    begin
      puts "Registering with acme server" if ($verbose||0) >= 2
      account = $client.new_account(contact: "mailto:#{$config['email']}", terms_of_service_agreed: true)
    rescue => e
      raise e unless e.message == "Registration key is already in use"
      puts "Already registered" if ($verbose||0) >= 2
    end
  end
  $client
end

def generate_cert(info)
  puts "generating cert: #{file(info,"cert")}" if ($verbose||0) >= 1
  return if $dryrun
  (well_known_host, well_known_dir) = [$1,$2] if (info['well-known']||'') =~ /^(?:((?:\w+@)?[^:]+):)?(.+)$/
  well_known_dir ||= '/var/www/well-known/acme-challenge/'

  csr = OpenSSL::X509::Request.new File.read file(info, "csr")

  client = acme_client()

  order = client.new_order(identifiers: ([ info['cn'] ] + (info['alt'] ? info['alt'].map {|a| a['DNS'] }.select {|a| a} : [])).uniq)

  authorization = order.authorizations

  challenge = authorization.map {|auth| auth.http }
  with_well_known_files(challenge, well_known_dir, well_known_host) do
    challenge.each {|ch| ch.request_validation }
    start = Time::now
    while challenge.any? {|ch| ch.status == 'pending' }
      puts "Authorizations are pending" if ($verbose||0) >= 2
      raise 'Timeout waiting for letsencrypt to validate our challenge' if Time::now > start + 60
      sleep 1
      challenge.map {|ch| ch.reload }
    end
    bad = challenge.select {|ch| ch.status != 'valid' }
    raise 'Bad challenge verify_status: '+bad.map {|b| "#{authorization.domain} => '#{b.status}'" }.join(", ") unless bad.empty?
    puts "Authorizations succeeded" if ($verbose||0) >= 2
  end

  puts "Requesting certificate" if ($verbose||0) >= 2
  order.finalize(csr: csr)
  start = Time::now
  while order.status == 'processing'
    puts "Finalizing certificate order (pending)" if ($verbose||0) >= 2
    raise 'Timeout waiting for letsencrypt to finalize the order' if Time::now > start + 60
    sleep 1
    order.reload
  end
  
  puts "Saving certificate to disk" if ($verbose||0) >= 2
  IO.write(file(info, "cert"), order.certificate, perm: 0644)
end

def generate_combined_cert(info)
  puts "generating combined cert: #{file(info,"combined")}" if ($verbose||0) == 1
  return if $dryrun
  IO.write(file(info,"combined"), IO.read(file(info,"cert")) + IO.read(file(info,"key")), perm: 0640)
  Vsh.chown info['user'], info['group'], file(info,"combined")
end

def generate_fingerprint(info)
  puts "generating fingerprint: #{file(info,"cert","fingerprint")}" if ($verbose||0) == 1
  return if $dryrun
  der = OpenSSL::X509::Certificate.new(IO.read file(info,"cert")).to_der
  IO.write(file(info,"cert","fingerprint"), Digest::SHA1.digest(der).bytes.map {|d| sprintf("%02X", d)}.join(':'), perm: 0644)
end

def generate_der(info)
  puts "generating der: #{file(info,"key","der")}, #{file(info,"cert","der")}" if ($verbose||0) == 1
  return if $dryrun
  IO.write(file(info,"cert","der"), OpenSSL::X509::Certificate.new(IO.read file(info,"cert")).to_der, perm: 0644)
  IO.write(file(info,"key", "der"), OpenSSL::PKey::RSA.new(IO.read file(info,"key")).to_der, perm: 0600)
  Vsh.chown info['user'], info['group'], file(info,"key","der")
end

def scp_certs(info, file_params)
  files_to_copy = file_params.map { |p| file_master(info,*p) }
                  .select { |f| File.exist?(f) && File.mtime(f) > (File.mtime("#{f}.scp-stamp") rescue Time.new(0)) }
  return unless files_to_copy.count > 0
  puts "copying #{files_to_copy}: #{info['scp']}" if ($verbose||0) == 1
  return if $dryrun
  Vsh.system 'scp', *files_to_copy, info['scp']
  Vsh.system 'touch', *(files_to_copy.map { |f| "#{f}.scp-stamp" })
end

def seconds_til_expiry(file)
  OpenSSL::X509::Certificate.new(File.read file).not_after - Time.now
end
def days_til_expiry(file)
  seconds_til_expiry(file) / 3600 / 24
end

def shortest_link_path(src, dst)
  src = File.absolute_path(src)
  dst = File.absolute_path(dst)
  sa = src.split(File::SEPARATOR)
  da = dst.split(File::SEPARATOR)
  while sa[0] == da[0]
    sa.shift
    da.shift
  end
  [sa.join(File::SEPARATOR), da.join(File::SEPARATOR)]
end

conf_file = "#{$conf_dir}/config.yaml"
$config = load_config(conf_file)

$config.select {|k,v| v.class == Hash}.each do |name, info|
  info['name'] = name
  puts "Considering: #{info.inspect}"  if ($verbose||0) > 2
  certfile = file_master(info,"cert")
  renew = File.exist?(certfile) && days_til_expiry(certfile) < 10
  time = File.exist?(certfile) && !renew ? parse_time_from_filename(File.readlink(certfile)) : Time.now
  puts "Needs renewal: #{certfile}, expires in #{days_til_expiry(certfile)} days" if renew && ($verbose||0) > 1
  info['date'] = time.strftime("%Y-%m-%d")
  info['year'] = time.strftime("%Y")
  success = true
  files = ([
    [ :generate_csr,           [["key"],["csr"]],               true ],
    [ :generate_cert,          [["cert"]],                      true ],
    [ :generate_combined_cert, [["combined"]],                  info['combined'] ],
    [ :generate_fingerprint,   [["cert", "fingerprint"]],       info['fingerprint'] ],
    [ :generate_der,           [["cert", "der"],["key","der"]], info['der'] ],
  ].map do |method, file_param, doit|
    next unless doit
    begin
      send(method, info) unless file_param.map { |p| file(info, *p) }.all? {|file| File.exist?(file) }
    rescue => e
      warn e
      success = false
      break
    end
    file_param
  end||[]).select { |fp| fp }.each do |files|
    files.each do |file_param|
      link = file_master(info, *file_param)
      master = file(info, *file_param)
      next if File.exist?(link) && File.absolute_path(File.readlink(link), $certs_dir) == File.absolute_path(master)
      (master,) = shortest_link_path(master, link)
      puts "#{link} -> #{master}" if ($verbose||0) == 1
      next if $dryrun
      Vsh.rm(link) rescue nil
      Vsh.ln_s(master, link)
    end
  end.flatten(1)
  scp_certs(info, files) if info['scp'] && !$dryrun
  Vsh.system(*%W"#{info['shell'] || "/bin/sh"} -c #{info['on_renew']}") if success && renew && info['on_renew'] && !$dryrun
end

#require 'pp'

#pp $config

